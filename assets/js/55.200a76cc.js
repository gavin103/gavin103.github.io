(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{534:function(t,a,_){"use strict";_.r(a);var r=_(4),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("p"),_("div",{staticClass:"table-of-contents"},[_("ul",[_("li",[_("a",{attrs:{href:"#_7-1-冗余的数据传输"}},[t._v("7.1 冗余的数据传输")])]),_("li",[_("a",{attrs:{href:"#_7-2-带宽瓶颈"}},[t._v("7.2 带宽瓶颈")])]),_("li",[_("a",{attrs:{href:"#_7-3-瞬间拥塞"}},[t._v("7.3 瞬间拥塞")])]),_("li",[_("a",{attrs:{href:"#_7-4-距离时延"}},[t._v("7.4 距离时延")])]),_("li",[_("a",{attrs:{href:"#_7-5-命中和未命中的"}},[t._v("7.5 命中和未命中的")]),_("ul",[_("li",[_("a",{attrs:{href:"#_7-5-1-再验证"}},[t._v("7.5.1 再验证")])]),_("li",[_("a",{attrs:{href:"#_7-5-2-命中率"}},[t._v("7.5.2 命中率")])]),_("li",[_("a",{attrs:{href:"#_7-5-3-字节命中率"}},[t._v("7.5.3 字节命中率")])]),_("li",[_("a",{attrs:{href:"#_7-5-4-区分命中和未命中的情况"}},[t._v("7.5.4 区分命中和未命中的情况")])])])]),_("li",[_("a",{attrs:{href:"#_7-6-缓存的拓扑结构"}},[t._v("7.6 缓存的拓扑结构")]),_("ul",[_("li",[_("a",{attrs:{href:"#_7-6-1-私有缓存"}},[t._v("7.6.1 私有缓存")])]),_("li",[_("a",{attrs:{href:"#_7-6-2-公有代理缓存"}},[t._v("7.6.2 公有代理缓存")])]),_("li",[_("a",{attrs:{href:"#_7-6-3-代理缓存的层次结构"}},[t._v("7.6.3 代理缓存的层次结构")])]),_("li",[_("a",{attrs:{href:"#_7-6-4-网状缓存、内容路由以及对等缓存"}},[t._v("7.6.4 网状缓存、内容路由以及对等缓存")])])])])])]),_("p"),t._v(" "),_("p",[t._v("Web 缓存是可以自动保存常见文档副本的 HTTP 设备。当 Web 请求抵达缓存时， 如果本地有“已缓存的”副本，就可以从本地存储设备而不是原始服务器中提取这 个文档。使用缓存有下列优点。")]),t._v(" "),_("ul",[_("li",[t._v("缓存减少了冗余的数据传输，节省了你的网络费用。")]),t._v(" "),_("li",[t._v("缓存缓解了网络瓶颈的问题。不需要更多的带宽就能够更快地加载页面。")]),t._v(" "),_("li",[t._v("缓存降低了对原始服务器的要求。服务器可以更快地响应，避免过载的出现。")]),t._v(" "),_("li",[t._v("缓存降低了距离时延，因为从较远的地方加载页面会更慢一些。")])]),t._v(" "),_("h2",{attrs:{id:"_7-1-冗余的数据传输"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-冗余的数据传输"}},[t._v("#")]),t._v(" 7.1 冗余的数据传输")]),t._v(" "),_("p",[t._v("有很多客户端访问一个流行的原始服务器页面时，服务器会多次传输同一份文档， 每次传送给一个客户端。\n这些冗余的数据传输会耗尽昂贵的网络带宽，降低传输速度，加重 Web 服务器的负载。\n缓存可以保留第一条服务器响应的副本，后继请求就可以由缓存的副本来应对")]),t._v(" "),_("h2",{attrs:{id:"_7-2-带宽瓶颈"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-带宽瓶颈"}},[t._v("#")]),t._v(" 7.2 带宽瓶颈")]),t._v(" "),_("p",[t._v("由于短板效应，客户端会以访问路径上最慢的网速访问服务器。\n如果客户端从一个快速局域网的缓存中得到了一份副本，就大大提高了性能。")]),t._v(" "),_("h2",{attrs:{id:"_7-3-瞬间拥塞"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-瞬间拥塞"}},[t._v("#")]),t._v(" 7.3 瞬间拥塞")]),t._v(" "),_("p",[t._v("突发事件比如热点新闻，秒杀活动会造成流量峰值，瞬间拥塞网络，让和 Web 服务器产生灾难性的崩溃。")]),t._v(" "),_("h2",{attrs:{id:"_7-4-距离时延"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-距离时延"}},[t._v("#")]),t._v(" 7.4 距离时延")]),t._v(" "),_("p",[t._v("每台网络设备都会造成时延，距离越长，访问路径上节点越多，时延就越明显。\n将缓存放在附近的机房里可以将文件传输距离从数千英里缩短为数十米。")]),t._v(" "),_("h2",{attrs:{id:"_7-5-命中和未命中的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-命中和未命中的"}},[t._v("#")]),t._v(" 7.5 命中和未命中的")]),t._v(" "),_("p",[t._v("可以用已有的副本为某些到达缓存的请求提供服务。这被称为缓存命中(cache hit)。\n其他一些到达缓存的请求可能会由于没有副本可用，而被转发 给原始服务器。这被称为缓存未命中(cache miss)\n"),_("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/40884016e82e48bbb85fec509773e1c7~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),t._v(" "),_("h3",{attrs:{id:"_7-5-1-再验证"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-1-再验证"}},[t._v("#")]),t._v(" 7.5.1 再验证")]),t._v(" "),_("p",[t._v("原始服务器的内容可能会发生变化，缓存要不时对其进行检测，看看它们保存的副本是否仍是服务器上最新的副本。这些“新鲜度检测”被称为 HTTP 再验证 (revalidation)。")]),t._v(" "),_("p",[t._v("为了节省带宽，大部分缓存只有在客户端发起请求，并且副本旧得足以需要检测的时候，才会对副本进行再验证。")]),t._v(" "),_("p",[t._v("缓存对缓存的副本进行再验证时，会向原始服务器发送一个小的再验证请求。如果 内容没有变化，服务器会以一个小的 304 Not Modified 进行响应。只要缓存知道副 本仍然有效，就会再次将副本标识为暂时新鲜的，并将副本提供给客户端这被称作再验证命中(revalidate hit)或缓慢命中(slow hit)。这种方式确实 要与原始服务器进行核对，所以会比单纯的缓存命中要慢，但它没有从服务器中获取对象数据，所以要比缓存未命中快一些。")]),t._v(" "),_("p",[t._v("HTTP 为我们提供了几个用来对已缓存对象进行再验证的工具，但最常用的是 If- Modified-Since 首部。将这个首部添加到 GET 请求中去，就可以告诉服务器，只 有在缓存了对象的副本之后，又对其进行了修改的情况下，才发送此对象。")]),t._v(" "),_("ul",[_("li",[t._v("再验证命中")])]),t._v(" "),_("p",[t._v("如果服务器对象未被修改，服务器会向客户端发送一个小的 HTTP 304 Not Modified 响应。")]),t._v(" "),_("ul",[_("li",[t._v("再验证未命中")])]),t._v(" "),_("p",[t._v("如果服务器对象与已缓存副本不同，服务器向客户端发送一条普通的、带有完整 内容的 HTTP 200 OK 响应。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f0f953693a742a2843a6d21464870fe~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),t._v(" "),_("ul",[_("li",[t._v("对象被删除")])]),t._v(" "),_("p",[t._v("如果服务器对象已经被删除了，服务器就回送一个 404 Not Found 响应，缓存也 会将其副本删除。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04872bb5790d486db02a5d3d00f6d3f9~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),t._v(" "),_("h3",{attrs:{id:"_7-5-2-命中率"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-2-命中率"}},[t._v("#")]),t._v(" 7.5.2 命中率")]),t._v(" "),_("p",[t._v("由缓存提供服务的请求所占的比例被称为缓存命中率(cache hit rate，或称为缓存命中比例)")]),t._v(" "),_("h3",{attrs:{id:"_7-5-3-字节命中率"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-3-字节命中率"}},[t._v("#")]),t._v(" 7.5.3 字节命中率")]),t._v(" "),_("p",[t._v("文档体积有大小，所以文档命中率不能说明一切，有些人更愿意使用字节命中率(byte hit rate)作为度量值：\n字节命中率表示的是缓存提供的字节在传输的所有字节中所占的比例。")]),t._v(" "),_("p",[t._v("文档命中率和字节命中率对缓存性能的评估都是很有用的。文档命中率说明阻止了 多少通往外部网络的 Web 事务。\n提高文档命中率对降低整体延迟(时延)很有好处。\n字节命中率说明阻止了多少字节传向因特网。提高字节命中率对节省带宽很有利。")]),t._v(" "),_("h3",{attrs:{id:"_7-5-4-区分命中和未命中的情况"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-4-区分命中和未命中的情况"}},[t._v("#")]),t._v(" 7.5.4 区分命中和未命中的情况")]),t._v(" "),_("p",[t._v("HTTP 没有为用户提供一种手段来区分响应是缓存命中的，还是访问原 始服务器得到的。\n在这两种情况下，响应码都是 200 OK，说明响应有主体部分。\n(这里容易混淆一个概念，缓存设备响应给客户端的请求，响应码也是200。与客户端自身的缓存做区分)")]),t._v(" "),_("p",[t._v("客户端有一种方法可以判断响应是否来自缓存，就是使用 Date 首部。将响应中 Date 首部的值与当前时间进行比较，如果响应中的日期值比较早，客户端通常就可以认为这是一条缓存的响应。\n客户端也可以通过 Age 首部来检测缓存的响应，通过这个首部可以分辨出这条响应的使用期。")]),t._v(" "),_("h2",{attrs:{id:"_7-6-缓存的拓扑结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-6-缓存的拓扑结构"}},[t._v("#")]),t._v(" 7.6 缓存的拓扑结构")]),t._v(" "),_("h3",{attrs:{id:"_7-6-1-私有缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-6-1-私有缓存"}},[t._v("#")]),t._v(" 7.6.1 私有缓存")]),t._v(" "),_("p",[t._v("私有缓存不需要很大的动力或存储空间，这样就可以将其做得很小，很便宜。Web 浏 览器中有内建的私有缓存 —— 大多数浏览器都会将常用文档缓存在你个人电脑的磁盘 和内存中，并且允许用户去配置缓存的大小和各种设置。")]),t._v(" "),_("h3",{attrs:{id:"_7-6-2-公有代理缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-6-2-公有代理缓存"}},[t._v("#")]),t._v(" 7.6.2 公有代理缓存")]),t._v(" "),_("p",[t._v("公有缓存是特殊的共享代理服务器，被称为缓存代理服务器(caching proxy server)，或者更常见地被称为代理缓存(proxy cache)。")]),t._v(" "),_("p",[t._v("公有缓存会接受来自多个 用户的访问，所以通过它可以更好地减少冗余流量。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/84c72d1cb1f543f6a904a79f0fa74af3~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),t._v(" "),_("h3",{attrs:{id:"_7-6-3-代理缓存的层次结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-6-3-代理缓存的层次结构"}},[t._v("#")]),t._v(" 7.6.3 代理缓存的层次结构")]),t._v(" "),_("p",[t._v("实现层次化(hierarchy)的缓存是很有意义的。\n在靠近客户端的地方使用小型廉价缓存，而更高层次中，则逐步采用更大、功能更强的缓存来装载多用户共享的文档。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b24f4297c864b53a6bbfd8d8f5d42c3~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),t._v(" "),_("p",[t._v("我们希望大部分用户都能在附近的第一级缓存中命中，当代理链路变得很长的时候，这种性能损耗会变得非常明显。")]),t._v(" "),_("h3",{attrs:{id:"_7-6-4-网状缓存、内容路由以及对等缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-6-4-网状缓存、内容路由以及对等缓存"}},[t._v("#")]),t._v(" 7.6.4 网状缓存、内容路由以及对等缓存")]),t._v(" "),_("p",[t._v("有些网络结构会构建复杂的网状缓存(cache mesh)，而不是简单的缓存层次结构。\n网状缓存中的代理缓存之间会以更加复杂的方式进行对话，做出动态的缓存通信决 策，决定与哪个父缓存进行对话，或者决定彻底绕开缓存，直接连接原始服务器。\n这种代理缓存会决定选择何种路由对内容进行访问、管理和传送，因此可将其称为 内容路由器(content router)")]),t._v(" "),_("p",[t._v("HTTP 并不支持兄弟缓存，所以人们通过一些协议对 HTTP 进行了扩展，比如因特网缓存协议(Internet Cache Protocol，ICP)和超文本缓存协 议(HyperText Caching Protocol，HTCP)。\n"),_("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a1374628fcd24cb5bd6626937a0860da~tplv-k3u1fbpfcp-watermark.image",alt:""}})])])}),[],!1,null,null,null);a.default=e.exports}}]);