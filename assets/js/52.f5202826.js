(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{533:function(t,a,_){"use strict";_.r(a);var v=_(4),e=Object(v.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("p"),_("div",{staticClass:"table-of-contents"},[_("ul",[_("li",[_("a",{attrs:{href:"#_4-1-tcp连接"}},[t._v("4.1 TCP连接")]),_("ul",[_("li",[_("a",{attrs:{href:"#_4-1-1-tcp的可靠数据管道"}},[t._v("4.1.1 TCP的可靠数据管道")])]),_("li",[_("a",{attrs:{href:"#_4-1-2-tcp流是分段的、由ip分组传送"}},[t._v("4.1.2 TCP流是分段的、由IP分组传送")])])])]),_("li",[_("a",{attrs:{href:"#_4-2-对tcp性能的考虑"}},[t._v("4.2 对TCP性能的考虑")]),_("ul",[_("li",[_("a",{attrs:{href:"#_4-2-1-http事务的时延"}},[t._v("4.2.1 HTTP事务的时延")])]),_("li",[_("a",{attrs:{href:"#_4-2-2-性能聚焦区域"}},[t._v("4.2.2 性能聚焦区域")])]),_("li",[_("a",{attrs:{href:"#_4-2-3-tcp连接的握手时延"}},[t._v("4.2.3 TCP连接的握手时延")])]),_("li",[_("a",{attrs:{href:"#_4-2-4-延迟确认"}},[t._v("4.2.4 延迟确认")])]),_("li",[_("a",{attrs:{href:"#_4-2-5-tcp慢启动"}},[t._v("4.2.5 TCP慢启动")])]),_("li",[_("a",{attrs:{href:"#_4-2-6-nagle算法与tcp-nodelay"}},[t._v("4.2.6 Nagle算法与TCP_NODELAY")])])])]),_("li",[_("a",{attrs:{href:"#_4-3-http连接的处理"}},[t._v("4.3 HTTP连接的处理")]),_("ul",[_("li",[_("a",{attrs:{href:"#_4-3-1-常被误解的connection首部"}},[t._v("4.3.1 常被误解的Connection首部")])]),_("li",[_("a",{attrs:{href:"#_4-3-2-串行事务处理时延"}},[t._v("4.3.2 串行事务处理时延")])])])]),_("li",[_("a",{attrs:{href:"#_4-4-并行连接"}},[t._v("4.4 并行连接")])]),_("li",[_("a",{attrs:{href:"#持久连接"}},[t._v("持久连接")])]),_("li",[_("a",{attrs:{href:"#管道化连接"}},[t._v("管道化连接")])]),_("li",[_("a",{attrs:{href:"#关闭连接的奥秘"}},[t._v("关闭连接的奥秘")])])])]),_("p"),t._v(" "),_("p",[t._v("HTTP 连 接是 HTTP 报文传输的关键通道。\n本章内容包含以下部分：")]),t._v(" "),_("ul",[_("li",[t._v("HTTP 是如何使用 TCP 连接的;")]),t._v(" "),_("li",[t._v("TCP 连接的时延、瓶颈以及存在的障碍;")]),t._v(" "),_("li",[t._v("HTTP 的优化，包括并行连接、keep-alive(持久连接)和管道化连接; • 管理连接时应该以及不应该做的事情。")])]),t._v(" "),_("h2",{attrs:{id:"_4-1-tcp连接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-tcp连接"}},[t._v("#")]),t._v(" 4.1 TCP连接")]),t._v(" "),_("h3",{attrs:{id:"_4-1-1-tcp的可靠数据管道"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-tcp的可靠数据管道"}},[t._v("#")]),t._v(" 4.1.1 TCP的可靠数据管道")]),t._v(" "),_("p",[t._v("TCP 为 HTTP 提供了一条可靠的比特传输管道。\n从 TCP 连接一端填入的字节会从另 一端以原有的顺序、正确地传送出来。\n"),_("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4eef94231d1548c2ba53a8b3a38b9b52~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),t._v(" "),_("h3",{attrs:{id:"_4-1-2-tcp流是分段的、由ip分组传送"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-tcp流是分段的、由ip分组传送"}},[t._v("#")]),t._v(" 4.1.2 TCP流是分段的、由IP分组传送")]),t._v(" "),_("p",[t._v("TCP 的数据是通过名为 IP 分组(或 IP 数据报)的小数据块来发送的。\nHTTP 就是“HTTP over TCP over IP”这个“协议栈”中的最顶层 了。\n其安全版本 HTTPS 就是在 HTTP 和 TCP 之间插入了一个(称为 TLS 或 SSL 的)密码加密层\n"),_("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f62c05a7085e46b3829b03b4d624a3a4~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),t._v(" "),_("p",[t._v("HTTP 要传送一条报文时，会以流的形式将报文数据的内容通过一条打开的 TCP 连接按序传输。\nTCP 收到数据流之后，会将数据流砍成被称作段的小数据块，并将段封装在 IP 分组中，通过因特网进行传输。\n所有这些工作都是由 TCP/ IP 软件来处理的，HTTP 程序员什么都看不到。")]),t._v(" "),_("p",[t._v("每个 IP 分组中都包括:")]),t._v(" "),_("ul",[_("li",[t._v("一个IP分组首部(通常为20字节)，IP 首部包含了源和目的 IP 地址、长度和其他一些标记。")]),t._v(" "),_("li",[t._v("一个 TCP 段首部(通常为 20 字节)，TCP 段的首部包含了 TCP 端口号、TCP 控制标记，以及用于数据排序和完整性检查的一些数字值。")]),t._v(" "),_("li",[t._v("一个 TCP 数据块(0 个或多个字节)。")])]),t._v(" "),_("p",[t._v("在任意时刻计算机都可以有几条 TCP 连接处于打开状态。TCP 是通过端口号来保持所有这些连接持续不断地运行。\n端口号和雇员使用的电话分机号很类似。就像公司的总机号码能将你接到前台，而 分机号可以将你接到正确的雇员位置一样，IP 地址可以将你连接到正确的计算机，而端口号则可以将你连接到正确的应用程序上去。TCP 连接是通过 4 个值来识别的:\n"),_("code",[t._v("< 源 IP 地址、源端口号、目的 IP 地址、目的端口号 >")]),t._v("\n这 4 个值一起唯一地定义了一条连接。\n"),_("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/69c4c57dcd3e4d3b94736c07d859f3f9~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),t._v(" "),_("p",[t._v("下图显示了 Web 浏览器是如何用 HTTP 从 Joe 的五金商店下载 power-tools.html 页面的。\n"),_("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db978d79df484735a553e112cc768dd5~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),t._v(" "),_("h2",{attrs:{id:"_4-2-对tcp性能的考虑"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-对tcp性能的考虑"}},[t._v("#")]),t._v(" 4.2 对TCP性能的考虑")]),t._v(" "),_("h3",{attrs:{id:"_4-2-1-http事务的时延"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-http事务的时延"}},[t._v("#")]),t._v(" 4.2.1 HTTP事务的时延")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/93e0bcc011a74efea9306a1034a96f43~tplv-k3u1fbpfcp-watermark.image",alt:""}}),t._v("\n上图为串行 HTTP 事务的时间线\n与建立 TCP 连接，以及传输请求和响应报文的时间相比，事务处理时间可能是很短的。\n也就是说， HTTP 时延就是由 TCP 网络时延构成的。")]),t._v(" "),_("p",[t._v("HTTP 事务的时延有以下几种主要原因：")]),t._v(" "),_("ol",[_("li",[t._v("客户端首先需要根据 URI 确定 Web 服务器的 IP 地址和端口号。\n如果最近没有对 URI 中的主机名进行访问，通过 DNS 解析系统将 URI 中的主机名转换成一个 IP 地址可能要花费数十秒的时间。")])]),t._v(" "),_("blockquote",[_("p",[t._v("大多数 HTTP 客户端都有一个小的 DNS 缓存，用来保存近期所访问站点的 IP 地址。如果 已经在本地“缓存”(记录)了 IP 地址，查询就可以立即完成。")])]),t._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[_("p",[t._v("接下来，客户端会向服务器发送一条 TCP 连接请求，并等待服务器回送一个请求接受应答。\n每条新的 TCP 连接都会有连接建立时延，这个值通常最多只有一两秒钟。\n但如果有数百个 HTTP 事务的话，这个值会快速地叠加上去。")])]),t._v(" "),_("li",[_("p",[t._v("因特网传输请求报文，以及服务器处理请求报文都需要时间。\n然后，Web 服务器会回送 HTTP 响应，这也需要花费时间。")])])]),t._v(" "),_("p",[t._v("这些 TCP 网络时延的大小取决于硬件速度、网络和服务器的负载，请求和响应报文的尺寸，以及客户端和服务器之间的距离。TCP 协议的技术复杂性也会对时延产生巨大的影响。")]),t._v(" "),_("h3",{attrs:{id:"_4-2-2-性能聚焦区域"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-性能聚焦区域"}},[t._v("#")]),t._v(" 4.2.2 性能聚焦区域")]),t._v(" "),_("p",[t._v("以下列出了一些会对 HTTP 程序员产生影响的、最常见的 TCP 相关时延，其中包括:")]),t._v(" "),_("ul",[_("li",[t._v("TCP 连接建立握手;")]),t._v(" "),_("li",[t._v("TCP 慢启动拥塞控制;")]),t._v(" "),_("li",[t._v("数据聚集的 Nagle 算法;")]),t._v(" "),_("li",[t._v("用于捎带确认的 TCP 延迟确认算法;")]),t._v(" "),_("li",[t._v("TIME_WAIT 时延和端口耗尽。")])]),t._v(" "),_("p",[t._v("如果要编写高性能的 HTTP 软件，就应该理解上面的每一个因素。")]),t._v(" "),_("h3",{attrs:{id:"_4-2-3-tcp连接的握手时延"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-3-tcp连接的握手时延"}},[t._v("#")]),t._v(" 4.2.3 TCP连接的握手时延")]),t._v(" "),_("p",[t._v("建立一条新的 TCP 连接时，甚至是在发送任意数据之前，TCP 软件之间会交换一系列的 IP 分组，对连接的有关参数进行沟通(如下图)。如果连接只用来传送少量数据，这些交换过程就会严重降低 HTTP 的性能。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/414d6b9cb3f1460b865380954d31e13b~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),t._v(" "),_("p",[t._v("TCP 连接握手需要经过以下几个步骤：")]),t._v(" "),_("ol",[_("li",[t._v("请求新的 TCP 连接时，客户端要向服务器发送一个小的 TCP 分组(通常是 40 ~ 60 个字节)。这个分组中设置了一个特殊的 SYN 标记，说明这是一个连接请求。")]),t._v(" "),_("li",[t._v("如果服务器接受了连接，就会对一些连接参数进行计算，并向客户端回送一个 TCP 分组，这个分组中的 SYN 和 ACK 标记都被置位，说明连接请求已被接受。")]),t._v(" "),_("li",[t._v("最后，客户端向服务器回送一条确认信息，通知它连接已成功建立。现代的 TCP 栈都允许客户端在这个确认分组中发送数据。")])]),t._v(" "),_("p",[t._v("通常 HTTP 事务都不会交换太多数据，小的 HTTP 事务可能会在 TCP 建立上花费 50%，或更多的时间。\n为减小这种 TCP 建立时延所造成的影响的，HTTP 采用了重用现存连接的方式。")]),t._v(" "),_("h3",{attrs:{id:"_4-2-4-延迟确认"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-4-延迟确认"}},[t._v("#")]),t._v(" 4.2.4 延迟确认")]),t._v(" "),_("p",[t._v("由于因特网自身无法确保可靠的分组传输(因特网路由器超负荷的话，可以随意丢弃分组)，所以 TCP 实现了自己的确认机制来确保数据的成功传输。")]),t._v(" "),_("p",[t._v("每个 TCP 段都有一个序列号和数据完整性校验和。每个段的接收者收到完好的段时，都会向发送者回送小的确认分组。如果发送者没有在指定的窗口时间内收到确认信息，发送者就认为分组已被破坏或损毁，并重发数据。")]),t._v(" "),_("p",[t._v("由于确认报文很小，所以 TCP 允许在发往相同方向的输出数据分组中对其进行“捎带”。TCP 将返回的确认信息与输出的数据分组结合在一起，可以更有效地利用网络。为了增加确认报文找到同向传输数据分组的可能性，很多 TCP 栈都实现了一种“延迟确认”算法。延迟确认算法会在一个特定的窗口时间(通常是 100 ~ 200 毫秒)内将输出确认存放在缓冲区中，以寻找能够捎带它的输出数据分组。如果在那个时间段内没有输出数据分组，就将确认信息放在单独的分组中传送。")]),t._v(" "),_("p",[t._v("但是，HTTP 具有双峰特征的请求 - 应答行为降低了捎带信息的可能。当希望有相反方向回传分组的时候，偏偏没有那么多。通常，延迟确认算法会引入相当大的时延。根据所使用操作系统的不同，可以调整或禁止延迟确认算法。")]),t._v(" "),_("p",[t._v("在对 TCP 栈的任何参数进行修改之前，一定要对自己在做什么有清醒的认识。TCP 中引入这些算法的目的是防止设计欠佳的应用程序对因特网造成破坏。对 TCP 配置进行的任意修改，都要绝对确保应用程序不会引发这些算法所要避免的问题。")]),t._v(" "),_("h3",{attrs:{id:"_4-2-5-tcp慢启动"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-5-tcp慢启动"}},[t._v("#")]),t._v(" 4.2.5 TCP慢启动")]),t._v(" "),_("p",[t._v("TCP 数据传输的性能还取决于 TCP 连接的使用期(age)。TCP 连接会随着时间进行 自我“调谐”，起初会限制连接的最大速度，如果数据成功传输，会随着时间的推移 提高传输的速度。这种调谐被称为 TCP 慢启动(slow start)，用于防止因特网的突然过载和拥塞。")]),t._v(" "),_("p",[t._v("TCP 慢启动限制了一个 TCP 端点在任意时刻可以传输的分组数。简单来说，每成功接收一个分组，发送端就有了发送另外两个分组的权限。如果某个 HTTP 事务有大量数据要发送，是不能一次将所有分组都发送出去的。必须发送一个分组，等待确认;然后可以发送两个分组，每个分组都必须被确认，这样就可以发送四个分组了， 以此类推。这种方式被称为“打开拥塞窗口”。")]),t._v(" "),_("p",[t._v("由于存在这种拥塞控制特性，所以新连接的传输速度会比已经交换过一定量数据的、 “已调谐”连接慢一些。由于已调谐连接要更快一些，所以 HTTP 中有一些可以重用现存连接的工具。本章稍后会介绍这些 HTTP“持久连接”。")]),t._v(" "),_("h3",{attrs:{id:"_4-2-6-nagle算法与tcp-nodelay"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-6-nagle算法与tcp-nodelay"}},[t._v("#")]),t._v(" 4.2.6 Nagle算法与TCP_NODELAY")]),t._v(" "),_("p",[t._v("TCP 有一个数据流接口，应用程序可以通过它将任意尺寸的数据放入 TCP 栈中 —— 即使一次只放一个字节也可以!但是，每个 TCP 段中都至少装载了 40 个字节的标记和首部，所以如果 TCP 发送了大量包含少量数据的分组，网络的性能就会严重下降。")]),t._v(" "),_("p",[t._v("Nagle 算法(根据其发明者 John Nagle 命名)试图在发送一个分组之前，将大量 TCP 数据绑定在一起，以提高网络效率。RFC 896“IP/TCP 互连网络中的拥塞控制”对此算法进行了描述。")]),t._v(" "),_("p",[t._v("Nagle 算法鼓励发送全尺寸(LAN 上最大尺寸的分组大约是 1500 字节，在因特网 上是几百字节)的段。只有当所有其他分组都被确认之后，Nagle 算法才允许发送 非全尺寸的分组。如果其他分组仍然在传输过程中，就将那部分数据缓存起来。只有当挂起分组被确认，或者缓存中积累了足够发送一个全尺寸分组的数据时，才会 将缓存的数据发送出去。")]),t._v(" "),_("p",[t._v("Nagle 算法会引发几种 HTTP 性能问题。首先，小的 HTTP 报文可能无法填满一个 分组，可能会因为等待那些永远不会到来的额外数据而产生时延。其次，Nagle 算法与延迟确认之间的交互存在问题——Nagle 算法会阻止数据的发送，直到有确认分组抵达为止，但确认分组自身会被延迟确认算法延迟 100 ~ 200 毫秒。")]),t._v(" "),_("p",[t._v("HTTP 应用程序常常会在自己的栈中设置参数 TCP_NODELAY，禁用 Nagle 算法，提高性能。\n如果要这么做的话，一定要确保会向 TCP 写入大块的数据，这样就不会产生一堆小分组了。")]),t._v(" "),_("h2",{attrs:{id:"_4-3-http连接的处理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-http连接的处理"}},[t._v("#")]),t._v(" 4.3 HTTP连接的处理")]),t._v(" "),_("h3",{attrs:{id:"_4-3-1-常被误解的connection首部"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-常被误解的connection首部"}},[t._v("#")]),t._v(" 4.3.1 常被误解的Connection首部")]),t._v(" "),_("p",[t._v("HTTP 允许在客户端和最终的源端服务器之间存在一串 HTTP 中间实体(代理、高速缓存等)。可以从客户端开始，逐跳地将 HTTP 报文经过这些中间设备，转发到源端服务器上去(或者进行反向传输)。")]),t._v(" "),_("p",[t._v("在某些情况下，两个相邻的 HTTP 应用程序会为它们共享的连接应用一组选项。HTTP 的 Connection 首部字段中有一个由逗号分隔的连接标签列表，这些标签为此连接指定了一些不会传播到其他连接中去的选项。")]),t._v(" "),_("p",[t._v("如果 Connection 标签中包含了一个 HTTP 首部字段的名称，那么这个首部字段就包含了与一些连接有关的信息，不能将其转发出去。在将报文转发出去之前，必须删除 Connection 首部列出的所有首部字段。由于 Connection 首部可以防止无意中对 本地首部的转发，因此将逐跳首部名放入 Connection 首部被称为“对首部的保护”。\n"),_("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/585f90bee366475ebc069292d6cacbc6~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),t._v(" "),_("p",[t._v("Connection 首部可以承载 3 种不同类型的标签:")]),t._v(" "),_("ul",[_("li",[t._v("HTTP 首部字段名，列出了只与此连接有关的首部;")]),t._v(" "),_("li",[t._v("任意标签值，用于描述此连接的非标准选项;")]),t._v(" "),_("li",[t._v("值 close，说明操作完成之后（发送完下一条报文之后）需关闭这条持久连接。")])]),t._v(" "),_("h3",{attrs:{id:"_4-3-2-串行事务处理时延"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-2-串行事务处理时延"}},[t._v("#")]),t._v(" 4.3.2 串行事务处理时延")]),t._v(" "),_("p",[t._v("如果每个HTTP事务都需要(串行地建立)一条新的连接，那么连接时延和慢启动时延就会叠加起来。\n"),_("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f5f31ed62c44e21a33ddc50e8247a0f~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),t._v(" "),_("p",[t._v("串行加载除了引入的实际时延外还会导致在加载了足够多的对象之前，无法在屏幕上显示任何内容，让用户面对一个空白的屏幕，对装载的进度一无所知。")]),t._v(" "),_("p",[t._v("提高 HTTP 的连接性能，现在多采用以下技术：")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("并行连接")]),t._v("\n通过多条 TCP 连接发起并发的 HTTP 请求。")]),t._v(" "),_("li",[_("strong",[t._v("持久连接")]),t._v("\n重用 TCP 连接，以消除连接及关闭时延。")]),t._v(" "),_("li",[_("strong",[t._v("管道化连接")]),t._v("\n通过共享的 TCP 连接发起并发的 HTTP 请求。")]),t._v(" "),_("li",[_("strong",[t._v("复用的连接")]),t._v("\n交替传送请求和响应报文。")])]),t._v(" "),_("h2",{attrs:{id:"_4-4-并行连接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-并行连接"}},[t._v("#")]),t._v(" 4.4 并行连接")]),t._v(" "),_("p",[t._v("浏览器可以先完整地请求原始的 HTML 页面，然后请求第一个嵌入对象，然后请求第二个嵌入对象等，以这种简单的方式对每个嵌入式对象进行串行处 理。但这样实在是太慢了!")]),t._v(" "),_("p",[t._v("HTTP 允许客户端打开多条连接，并行地执行多个 HTTP 事务。在下图例子中，并行加载了四幅嵌入式图片，每个事务都有自己的 TCP 连接。\n"),_("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4212231bbd94f68a3c5bca2f8c2d3db~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),t._v(" "),_("h2",{attrs:{id:"持久连接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#持久连接"}},[t._v("#")]),t._v(" 持久连接")]),t._v(" "),_("h2",{attrs:{id:"管道化连接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#管道化连接"}},[t._v("#")]),t._v(" 管道化连接")]),t._v(" "),_("h2",{attrs:{id:"关闭连接的奥秘"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#关闭连接的奥秘"}},[t._v("#")]),t._v(" 关闭连接的奥秘")])])}),[],!1,null,null,null);a.default=e.exports}}]);